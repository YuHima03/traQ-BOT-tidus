// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BotTidus.RepositoryImpl.Models;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Pomelo.EntityFrameworkCore.MySql.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BotTidus.RepositoryImpl.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class RepoUserFaceCountEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BotTidus.RepositoryImpl.Models.RepoUserFaceCount",
                typeof(RepoUserFaceCount),
                baseEntityType,
                propertyCount: 4);

            var negativePhraseCount = runtimeEntityType.AddProperty(
                "NegativePhraseCount",
                typeof(uint),
                propertyInfo: typeof(RepoUserFaceCount).GetProperty("NegativePhraseCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RepoUserFaceCount).GetField("<NegativePhraseCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            negativePhraseCount.SetGetter(
                uint (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(entity),
                bool (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(entity) == 0U,
                uint (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(instance),
                bool (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(instance) == 0U);
            negativePhraseCount.SetSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(entity) = value);
            negativePhraseCount.SetMaterializationSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(entity) = value);
            negativePhraseCount.SetAccessors(
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.NegativePhraseCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(negativePhraseCount, 0),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(negativePhraseCount),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            negativePhraseCount.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            negativePhraseCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            negativePhraseCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            negativePhraseCount.AddAnnotation("Relational:ColumnName", "negative_phrase_count");

            var negativeReactionCount = runtimeEntityType.AddProperty(
                "NegativeReactionCount",
                typeof(uint),
                propertyInfo: typeof(RepoUserFaceCount).GetProperty("NegativeReactionCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RepoUserFaceCount).GetField("<NegativeReactionCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            negativeReactionCount.SetGetter(
                uint (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(entity),
                bool (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(entity) == 0U,
                uint (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(instance),
                bool (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(instance) == 0U);
            negativeReactionCount.SetSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(entity) = value);
            negativeReactionCount.SetMaterializationSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(entity) = value);
            negativeReactionCount.SetAccessors(
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.NegativeReactionCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(negativeReactionCount, 1),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(negativeReactionCount),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            negativeReactionCount.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            negativeReactionCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            negativeReactionCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            negativeReactionCount.AddAnnotation("Relational:ColumnName", "negative_reaction_count");

            var positivePhraseCount = runtimeEntityType.AddProperty(
                "PositivePhraseCount",
                typeof(uint),
                propertyInfo: typeof(RepoUserFaceCount).GetProperty("PositivePhraseCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RepoUserFaceCount).GetField("<PositivePhraseCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            positivePhraseCount.SetGetter(
                uint (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(entity),
                bool (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(entity) == 0U,
                uint (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(instance),
                bool (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(instance) == 0U);
            positivePhraseCount.SetSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(entity) = value);
            positivePhraseCount.SetMaterializationSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(entity) = value);
            positivePhraseCount.SetAccessors(
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.PositivePhraseCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(positivePhraseCount, 2),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(positivePhraseCount),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            positivePhraseCount.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            positivePhraseCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            positivePhraseCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            positivePhraseCount.AddAnnotation("Relational:ColumnName", "positive_phrase_count");

            var positiveReactionCount = runtimeEntityType.AddProperty(
                "PositiveReactionCount",
                typeof(uint),
                propertyInfo: typeof(RepoUserFaceCount).GetProperty("PositiveReactionCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(RepoUserFaceCount).GetField("<PositiveReactionCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0u);
            positiveReactionCount.SetGetter(
                uint (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(entity),
                bool (RepoUserFaceCount entity) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(entity) == 0U,
                uint (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(instance),
                bool (RepoUserFaceCount instance) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(instance) == 0U);
            positiveReactionCount.SetSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(entity) = value);
            positiveReactionCount.SetMaterializationSetter(
                (RepoUserFaceCount entity, uint value) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(entity) = value);
            positiveReactionCount.SetAccessors(
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => RepoUserFaceCountUnsafeAccessors.PositiveReactionCount(((RepoUserFaceCount)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(positiveReactionCount, 3),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(positiveReactionCount),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            positiveReactionCount.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            positiveReactionCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            positiveReactionCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            positiveReactionCount.AddAnnotation("Relational:ColumnName", "positive_reaction_count");

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var negativePhraseCount = runtimeEntityType.FindProperty("NegativePhraseCount");
            var negativeReactionCount = runtimeEntityType.FindProperty("NegativeReactionCount");
            var positivePhraseCount = runtimeEntityType.FindProperty("PositivePhraseCount");
            var positiveReactionCount = runtimeEntityType.FindProperty("PositiveReactionCount");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((RepoUserFaceCount)(source.Entity));
                    return ((ISnapshot)(new Snapshot<uint, uint, uint, uint>(((ValueComparer<uint>)(((IProperty)negativePhraseCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(negativePhraseCount)), ((ValueComparer<uint>)(((IProperty)negativeReactionCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(negativeReactionCount)), ((ValueComparer<uint>)(((IProperty)positivePhraseCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(positivePhraseCount)), ((ValueComparer<uint>)(((IProperty)positiveReactionCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(positiveReactionCount)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 4,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 4,
                shadowCount: 0,
                relationshipCount: 0,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "RepoUserFaceCount");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
