// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BotTidus.RepositoryImpl.Models;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Pomelo.EntityFrameworkCore.MySql.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BotTidus.RepositoryImpl.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class DiscordWebhookEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BotTidus.RepositoryImpl.Models.DiscordWebhook",
                typeof(DiscordWebhook),
                baseEntityType,
                propertyCount: 7,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(DiscordWebhook).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.SetGetter(
                Guid (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.Id(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.Id(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                Guid (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.Id(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.Id(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            id.SetSetter(
                (DiscordWebhook entity, Guid value) => DiscordWebhookUnsafeAccessors.Id(entity) = value);
            id.SetMaterializationSetter(
                (DiscordWebhook entity, Guid value) => DiscordWebhookUnsafeAccessors.Id(entity) = value);
            id.SetAccessors(
                Guid (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<Guid>(0) : (entry.FlaggedAsTemporary(0) && DiscordWebhookUnsafeAccessors.Id(((DiscordWebhook)(entry.Entity))) == new Guid("00000000-0000-0000-0000-000000000000") ? entry.ReadTemporaryValue<Guid>(0) : DiscordWebhookUnsafeAccessors.Id(((DiscordWebhook)(entry.Entity))))),
                Guid (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.Id(((DiscordWebhook)(entry.Entity))),
                Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(id, 0),
                Guid (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<Guid>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = MySqlGuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<Guid>(id));
            id.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            id.AddAnnotation("Relational:ColumnName", "id");

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(DiscordWebhook).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdAt.SetGetter(
                DateTime (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.CreatedAt(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.CreatedAt(entity) == default(DateTime),
                DateTime (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.CreatedAt(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.CreatedAt(instance) == default(DateTime));
            createdAt.SetSetter(
                (DiscordWebhook entity, DateTime value) => DiscordWebhookUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (DiscordWebhook entity, DateTime value) => DiscordWebhookUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<DateTime>(1) : (entry.FlaggedAsTemporary(1) && DiscordWebhookUnsafeAccessors.CreatedAt(((DiscordWebhook)(entry.Entity))) == default(DateTime) ? entry.ReadTemporaryValue<DateTime>(1) : DiscordWebhookUnsafeAccessors.CreatedAt(((DiscordWebhook)(entry.Entity))))),
                DateTime (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.CreatedAt(((DiscordWebhook)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(createdAt, 1),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            createdAt.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 1);
            createdAt.TypeMapping = MySqlDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "datetime(6)",
                    precision: 6));
            createdAt.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            createdAt.AddAnnotation("Relational:ColumnName", "created_at");

            var isEnabled = runtimeEntityType.AddProperty(
                "IsEnabled",
                typeof(bool),
                propertyInfo: typeof(DiscordWebhook).GetProperty("IsEnabled", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<IsEnabled>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isEnabled.SetGetter(
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.IsEnabled(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.IsEnabled(entity) == false,
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.IsEnabled(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.IsEnabled(instance) == false);
            isEnabled.SetSetter(
                (DiscordWebhook entity, bool value) => DiscordWebhookUnsafeAccessors.IsEnabled(entity) = value);
            isEnabled.SetMaterializationSetter(
                (DiscordWebhook entity, bool value) => DiscordWebhookUnsafeAccessors.IsEnabled(entity) = value);
            isEnabled.SetAccessors(
                bool (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.IsEnabled(((DiscordWebhook)(entry.Entity))),
                bool (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.IsEnabled(((DiscordWebhook)(entry.Entity))),
                bool (InternalEntityEntry entry) => entry.ReadOriginalValue<bool>(isEnabled, 2),
                bool (InternalEntityEntry entry) => entry.GetCurrentValue<bool>(isEnabled),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            isEnabled.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            isEnabled.TypeMapping = MySqlBoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    bool (bool v1, bool v2) => v1 == v2,
                    int (bool v) => ((object)v).GetHashCode(),
                    bool (bool v) => v));
            isEnabled.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            isEnabled.AddAnnotation("Relational:ColumnName", "is_enabled");

            var notifiesOnFlags = runtimeEntityType.AddProperty(
                "NotifiesOnFlags",
                typeof(int),
                propertyInfo: typeof(DiscordWebhook).GetProperty("NotifiesOnFlags", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<NotifiesOnFlags>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            notifiesOnFlags.SetGetter(
                int (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(entity) == 0,
                int (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(instance) == 0);
            notifiesOnFlags.SetSetter(
                (DiscordWebhook entity, int value) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(entity) = value);
            notifiesOnFlags.SetMaterializationSetter(
                (DiscordWebhook entity, int value) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(entity) = value);
            notifiesOnFlags.SetAccessors(
                int (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(((DiscordWebhook)(entry.Entity))),
                int (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.NotifiesOnFlags(((DiscordWebhook)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(notifiesOnFlags, 3),
                int (InternalEntityEntry entry) => entry.GetCurrentValue<int>(notifiesOnFlags),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            notifiesOnFlags.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            notifiesOnFlags.TypeMapping = MySqlIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v));
            notifiesOnFlags.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            notifiesOnFlags.AddAnnotation("Relational:ColumnName", "notifies_on_flags");

            var postUrl = runtimeEntityType.AddProperty(
                "PostUrl",
                typeof(string),
                propertyInfo: typeof(DiscordWebhook).GetProperty("PostUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<PostUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            postUrl.SetGetter(
                string (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.PostUrl(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.PostUrl(entity) == null,
                string (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.PostUrl(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.PostUrl(instance) == null);
            postUrl.SetSetter(
                (DiscordWebhook entity, string value) => DiscordWebhookUnsafeAccessors.PostUrl(entity) = value);
            postUrl.SetMaterializationSetter(
                (DiscordWebhook entity, string value) => DiscordWebhookUnsafeAccessors.PostUrl(entity) = value);
            postUrl.SetAccessors(
                string (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.PostUrl(((DiscordWebhook)(entry.Entity))),
                string (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.PostUrl(((DiscordWebhook)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(postUrl, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(postUrl),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            postUrl.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            postUrl.TypeMapping = MySqlStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                keyComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "longtext"),
                storeTypePostfix: StoreTypePostfix.None);
            postUrl.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            postUrl.AddAnnotation("Relational:ColumnName", "post_url");

            var updatedAt = runtimeEntityType.AddProperty(
                "UpdatedAt",
                typeof(DateTime),
                propertyInfo: typeof(DiscordWebhook).GetProperty("UpdatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<UpdatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updatedAt.SetGetter(
                DateTime (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.UpdatedAt(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.UpdatedAt(entity) == default(DateTime),
                DateTime (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.UpdatedAt(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.UpdatedAt(instance) == default(DateTime));
            updatedAt.SetSetter(
                (DiscordWebhook entity, DateTime value) => DiscordWebhookUnsafeAccessors.UpdatedAt(entity) = value);
            updatedAt.SetMaterializationSetter(
                (DiscordWebhook entity, DateTime value) => DiscordWebhookUnsafeAccessors.UpdatedAt(entity) = value);
            updatedAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(5) ? entry.ReadStoreGeneratedValue<DateTime>(2) : (entry.FlaggedAsTemporary(5) && DiscordWebhookUnsafeAccessors.UpdatedAt(((DiscordWebhook)(entry.Entity))) == default(DateTime) ? entry.ReadTemporaryValue<DateTime>(2) : DiscordWebhookUnsafeAccessors.UpdatedAt(((DiscordWebhook)(entry.Entity))))),
                DateTime (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.UpdatedAt(((DiscordWebhook)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(updatedAt, 5),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(updatedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            updatedAt.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 2);
            updatedAt.TypeMapping = MySqlDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "datetime(6)",
                    precision: 6));
            updatedAt.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);
            updatedAt.AddAnnotation("Relational:ColumnName", "updated_at");

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(Guid),
                propertyInfo: typeof(DiscordWebhook).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(DiscordWebhook).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            userId.SetGetter(
                Guid (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.UserId(entity),
                bool (DiscordWebhook entity) => DiscordWebhookUnsafeAccessors.UserId(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                Guid (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.UserId(instance),
                bool (DiscordWebhook instance) => DiscordWebhookUnsafeAccessors.UserId(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            userId.SetSetter(
                (DiscordWebhook entity, Guid value) => DiscordWebhookUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (DiscordWebhook entity, Guid value) => DiscordWebhookUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                Guid (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.UserId(((DiscordWebhook)(entry.Entity))),
                Guid (InternalEntityEntry entry) => DiscordWebhookUnsafeAccessors.UserId(((DiscordWebhook)(entry.Entity))),
                Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(userId, 6),
                Guid (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(userId),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            userId.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            userId.TypeMapping = MySqlGuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v));
            userId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            userId.AddAnnotation("Relational:ColumnName", "user_id");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var isEnabled = runtimeEntityType.FindProperty("IsEnabled");
            var notifiesOnFlags = runtimeEntityType.FindProperty("NotifiesOnFlags");
            var postUrl = runtimeEntityType.FindProperty("PostUrl");
            var updatedAt = runtimeEntityType.FindProperty("UpdatedAt");
            var userId = runtimeEntityType.FindProperty("UserId");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<Guid>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<Guid>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((DiscordWebhook)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid, DateTime, bool, int, string, DateTime, Guid>(((ValueComparer<Guid>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(id)), ((ValueComparer<DateTime>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(createdAt)), ((ValueComparer<bool>)(((IProperty)isEnabled).GetValueComparer())).Snapshot(source.GetCurrentValue<bool>(isEnabled)), ((ValueComparer<int>)(((IProperty)notifiesOnFlags).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(notifiesOnFlags)), (source.GetCurrentValue<string>(postUrl) == null ? null : ((ValueComparer<string>)(((IProperty)postUrl).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(postUrl))), ((ValueComparer<DateTime>)(((IProperty)updatedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(updatedAt)), ((ValueComparer<Guid>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(userId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<Guid, DateTime, DateTime>(((ValueComparer<Guid>)(((IProperty)id).GetValueComparer())).Snapshot(default(Guid)), ((ValueComparer<DateTime>)(((IProperty)createdAt).GetValueComparer())).Snapshot(default(DateTime)), ((ValueComparer<DateTime>)(((IProperty)updatedAt).GetValueComparer())).Snapshot(default(DateTime))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<Guid, DateTime, DateTime>(default(Guid), default(DateTime), default(DateTime)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((DiscordWebhook)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid>(((ValueComparer<Guid>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<Guid>(id)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 7,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 7,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 3);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "discord_webhooks");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
