// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using BotTidus.RepositoryImpl.Models;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Pomelo.EntityFrameworkCore.MySql.Storage.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace BotTidus.RepositoryImpl.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class MessageFaceScoreEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "BotTidus.RepositoryImpl.Models.MessageFaceScore",
                typeof(MessageFaceScore),
                baseEntityType,
                propertyCount: 8,
                keyCount: 1);

            var messageId = runtimeEntityType.AddProperty(
                "MessageId",
                typeof(Guid),
                propertyInfo: typeof(MessageFaceScore).GetProperty("MessageId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<MessageId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            messageId.SetGetter(
                Guid (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.MessageId(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.MessageId(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                Guid (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.MessageId(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.MessageId(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            messageId.SetSetter(
                (MessageFaceScore entity, Guid value) => MessageFaceScoreUnsafeAccessors.MessageId(entity) = value);
            messageId.SetMaterializationSetter(
                (MessageFaceScore entity, Guid value) => MessageFaceScoreUnsafeAccessors.MessageId(entity) = value);
            messageId.SetAccessors(
                Guid (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<Guid>(0) : (entry.FlaggedAsTemporary(0) && MessageFaceScoreUnsafeAccessors.MessageId(((MessageFaceScore)(entry.Entity))) == new Guid("00000000-0000-0000-0000-000000000000") ? entry.ReadTemporaryValue<Guid>(0) : MessageFaceScoreUnsafeAccessors.MessageId(((MessageFaceScore)(entry.Entity))))),
                Guid (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.MessageId(((MessageFaceScore)(entry.Entity))),
                Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(messageId, 0),
                Guid (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<Guid>(messageId, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            messageId.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            messageId.TypeMapping = MySqlGuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v));
            messageId.SetCurrentValueComparer(new EntryCurrentValueComparer<Guid>(messageId));
            messageId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            messageId.AddAnnotation("Relational:ColumnName", "message_id");

            var createdAt = runtimeEntityType.AddProperty(
                "CreatedAt",
                typeof(DateTime),
                propertyInfo: typeof(MessageFaceScore).GetProperty("CreatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<CreatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            createdAt.SetGetter(
                DateTime (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.CreatedAt(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.CreatedAt(entity) == default(DateTime),
                DateTime (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.CreatedAt(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.CreatedAt(instance) == default(DateTime));
            createdAt.SetSetter(
                (MessageFaceScore entity, DateTime value) => MessageFaceScoreUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetMaterializationSetter(
                (MessageFaceScore entity, DateTime value) => MessageFaceScoreUnsafeAccessors.CreatedAt(entity) = value);
            createdAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(1) ? entry.ReadStoreGeneratedValue<DateTime>(1) : (entry.FlaggedAsTemporary(1) && MessageFaceScoreUnsafeAccessors.CreatedAt(((MessageFaceScore)(entry.Entity))) == default(DateTime) ? entry.ReadTemporaryValue<DateTime>(1) : MessageFaceScoreUnsafeAccessors.CreatedAt(((MessageFaceScore)(entry.Entity))))),
                DateTime (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.CreatedAt(((MessageFaceScore)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(createdAt, 1),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(createdAt),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            createdAt.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 1);
            createdAt.TypeMapping = MySqlDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "datetime(6)",
                    precision: 6));
            createdAt.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            createdAt.AddAnnotation("Relational:ColumnName", "created_at");

            var negativePhraseCount = runtimeEntityType.AddProperty(
                "NegativePhraseCount",
                typeof(uint),
                propertyInfo: typeof(MessageFaceScore).GetProperty("NegativePhraseCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<NegativePhraseCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0u);
            negativePhraseCount.SetGetter(
                uint (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(entity) == 0U,
                uint (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(instance) == 0U);
            negativePhraseCount.SetSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(entity) = value);
            negativePhraseCount.SetMaterializationSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(entity) = value);
            negativePhraseCount.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(2) ? entry.ReadStoreGeneratedValue<uint>(2) : (entry.FlaggedAsTemporary(2) && MessageFaceScoreUnsafeAccessors.NegativePhraseCount(((MessageFaceScore)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(2) : MessageFaceScoreUnsafeAccessors.NegativePhraseCount(((MessageFaceScore)(entry.Entity))))),
                uint (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.NegativePhraseCount(((MessageFaceScore)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(negativePhraseCount, 2),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(negativePhraseCount),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            negativePhraseCount.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 2);
            negativePhraseCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            negativePhraseCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            negativePhraseCount.AddAnnotation("Relational:ColumnName", "negative_phrase_count");

            var negativeReactionCount = runtimeEntityType.AddProperty(
                "NegativeReactionCount",
                typeof(uint),
                propertyInfo: typeof(MessageFaceScore).GetProperty("NegativeReactionCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<NegativeReactionCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0u);
            negativeReactionCount.SetGetter(
                uint (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(entity) == 0U,
                uint (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(instance) == 0U);
            negativeReactionCount.SetSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(entity) = value);
            negativeReactionCount.SetMaterializationSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(entity) = value);
            negativeReactionCount.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<uint>(3) : (entry.FlaggedAsTemporary(3) && MessageFaceScoreUnsafeAccessors.NegativeReactionCount(((MessageFaceScore)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(3) : MessageFaceScoreUnsafeAccessors.NegativeReactionCount(((MessageFaceScore)(entry.Entity))))),
                uint (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.NegativeReactionCount(((MessageFaceScore)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(negativeReactionCount, 3),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(negativeReactionCount),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            negativeReactionCount.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 3);
            negativeReactionCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            negativeReactionCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            negativeReactionCount.AddAnnotation("Relational:ColumnName", "negative_reaction_count");

            var positivePhraseCount = runtimeEntityType.AddProperty(
                "PositivePhraseCount",
                typeof(uint),
                propertyInfo: typeof(MessageFaceScore).GetProperty("PositivePhraseCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<PositivePhraseCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0u);
            positivePhraseCount.SetGetter(
                uint (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(entity) == 0U,
                uint (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(instance) == 0U);
            positivePhraseCount.SetSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(entity) = value);
            positivePhraseCount.SetMaterializationSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(entity) = value);
            positivePhraseCount.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(4) ? entry.ReadStoreGeneratedValue<uint>(4) : (entry.FlaggedAsTemporary(4) && MessageFaceScoreUnsafeAccessors.PositivePhraseCount(((MessageFaceScore)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(4) : MessageFaceScoreUnsafeAccessors.PositivePhraseCount(((MessageFaceScore)(entry.Entity))))),
                uint (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.PositivePhraseCount(((MessageFaceScore)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(positivePhraseCount, 4),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(positivePhraseCount),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            positivePhraseCount.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 4);
            positivePhraseCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            positivePhraseCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            positivePhraseCount.AddAnnotation("Relational:ColumnName", "positive_phrase_count");

            var positiveReactionCount = runtimeEntityType.AddProperty(
                "PositiveReactionCount",
                typeof(uint),
                propertyInfo: typeof(MessageFaceScore).GetProperty("PositiveReactionCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<PositiveReactionCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                sentinel: 0u);
            positiveReactionCount.SetGetter(
                uint (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(entity) == 0U,
                uint (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(instance) == 0U);
            positiveReactionCount.SetSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(entity) = value);
            positiveReactionCount.SetMaterializationSetter(
                (MessageFaceScore entity, uint value) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(entity) = value);
            positiveReactionCount.SetAccessors(
                uint (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(5) ? entry.ReadStoreGeneratedValue<uint>(5) : (entry.FlaggedAsTemporary(5) && MessageFaceScoreUnsafeAccessors.PositiveReactionCount(((MessageFaceScore)(entry.Entity))) == 0U ? entry.ReadTemporaryValue<uint>(5) : MessageFaceScoreUnsafeAccessors.PositiveReactionCount(((MessageFaceScore)(entry.Entity))))),
                uint (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.PositiveReactionCount(((MessageFaceScore)(entry.Entity))),
                uint (InternalEntityEntry entry) => entry.ReadOriginalValue<uint>(positiveReactionCount, 5),
                uint (InternalEntityEntry entry) => entry.GetCurrentValue<uint>(positiveReactionCount),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            positiveReactionCount.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 5);
            positiveReactionCount.TypeMapping = MySqlUIntTypeMapping.Default.Clone(
                comparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                keyComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v),
                providerValueComparer: new ValueComparer<uint>(
                    bool (uint v1, uint v2) => v1 == v2,
                    int (uint v) => ((int)(v)),
                    uint (uint v) => v));
            positiveReactionCount.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);
            positiveReactionCount.AddAnnotation("Relational:ColumnName", "positive_reaction_count");

            var updatedAt = runtimeEntityType.AddProperty(
                "UpdatedAt",
                typeof(DateTime),
                propertyInfo: typeof(MessageFaceScore).GetProperty("UpdatedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<UpdatedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAddOrUpdate,
                beforeSaveBehavior: PropertySaveBehavior.Ignore,
                afterSaveBehavior: PropertySaveBehavior.Ignore,
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            updatedAt.SetGetter(
                DateTime (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.UpdatedAt(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.UpdatedAt(entity) == default(DateTime),
                DateTime (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.UpdatedAt(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.UpdatedAt(instance) == default(DateTime));
            updatedAt.SetSetter(
                (MessageFaceScore entity, DateTime value) => MessageFaceScoreUnsafeAccessors.UpdatedAt(entity) = value);
            updatedAt.SetMaterializationSetter(
                (MessageFaceScore entity, DateTime value) => MessageFaceScoreUnsafeAccessors.UpdatedAt(entity) = value);
            updatedAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(6) ? entry.ReadStoreGeneratedValue<DateTime>(6) : (entry.FlaggedAsTemporary(6) && MessageFaceScoreUnsafeAccessors.UpdatedAt(((MessageFaceScore)(entry.Entity))) == default(DateTime) ? entry.ReadTemporaryValue<DateTime>(6) : MessageFaceScoreUnsafeAccessors.UpdatedAt(((MessageFaceScore)(entry.Entity))))),
                DateTime (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.UpdatedAt(((MessageFaceScore)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(updatedAt, 6),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(updatedAt),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            updatedAt.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: 6);
            updatedAt.TypeMapping = MySqlDateTimeTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                keyComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                providerValueComparer: new ValueComparer<DateTime>(
                    bool (DateTime v1, DateTime v2) => v1.Equals(v2),
                    int (DateTime v) => ((object)v).GetHashCode(),
                    DateTime (DateTime v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "datetime(6)",
                    precision: 6));
            updatedAt.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.ComputedColumn);
            updatedAt.AddAnnotation("Relational:ColumnName", "updated_at");

            var userId = runtimeEntityType.AddProperty(
                "UserId",
                typeof(Guid),
                propertyInfo: typeof(MessageFaceScore).GetProperty("UserId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(MessageFaceScore).GetField("<UserId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            userId.SetGetter(
                Guid (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.UserId(entity),
                bool (MessageFaceScore entity) => MessageFaceScoreUnsafeAccessors.UserId(entity) == new Guid("00000000-0000-0000-0000-000000000000"),
                Guid (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.UserId(instance),
                bool (MessageFaceScore instance) => MessageFaceScoreUnsafeAccessors.UserId(instance) == new Guid("00000000-0000-0000-0000-000000000000"));
            userId.SetSetter(
                (MessageFaceScore entity, Guid value) => MessageFaceScoreUnsafeAccessors.UserId(entity) = value);
            userId.SetMaterializationSetter(
                (MessageFaceScore entity, Guid value) => MessageFaceScoreUnsafeAccessors.UserId(entity) = value);
            userId.SetAccessors(
                Guid (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.UserId(((MessageFaceScore)(entry.Entity))),
                Guid (InternalEntityEntry entry) => MessageFaceScoreUnsafeAccessors.UserId(((MessageFaceScore)(entry.Entity))),
                Guid (InternalEntityEntry entry) => entry.ReadOriginalValue<Guid>(userId, 7),
                Guid (InternalEntityEntry entry) => entry.GetCurrentValue<Guid>(userId),
                object (ValueBuffer valueBuffer) => valueBuffer[7]);
            userId.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            userId.TypeMapping = MySqlGuidTypeMapping.Default.Clone(
                comparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                keyComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v),
                providerValueComparer: new ValueComparer<Guid>(
                    bool (Guid v1, Guid v2) => v1 == v2,
                    int (Guid v) => ((object)v).GetHashCode(),
                    Guid (Guid v) => v));
            userId.AddAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);
            userId.AddAnnotation("Relational:ColumnName", "user_id");

            var key = runtimeEntityType.AddKey(
                new[] { messageId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var messageId = runtimeEntityType.FindProperty("MessageId");
            var createdAt = runtimeEntityType.FindProperty("CreatedAt");
            var negativePhraseCount = runtimeEntityType.FindProperty("NegativePhraseCount");
            var negativeReactionCount = runtimeEntityType.FindProperty("NegativeReactionCount");
            var positivePhraseCount = runtimeEntityType.FindProperty("PositivePhraseCount");
            var positiveReactionCount = runtimeEntityType.FindProperty("PositiveReactionCount");
            var updatedAt = runtimeEntityType.FindProperty("UpdatedAt");
            var userId = runtimeEntityType.FindProperty("UserId");
            var key = runtimeEntityType.FindKey(new[] { messageId });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<Guid>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<Guid>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MessageFaceScore)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid, DateTime, uint, uint, uint, uint, DateTime, Guid>(((ValueComparer<Guid>)(((IProperty)messageId).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(messageId)), ((ValueComparer<DateTime>)(((IProperty)createdAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(createdAt)), ((ValueComparer<uint>)(((IProperty)negativePhraseCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(negativePhraseCount)), ((ValueComparer<uint>)(((IProperty)negativeReactionCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(negativeReactionCount)), ((ValueComparer<uint>)(((IProperty)positivePhraseCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(positivePhraseCount)), ((ValueComparer<uint>)(((IProperty)positiveReactionCount).GetValueComparer())).Snapshot(source.GetCurrentValue<uint>(positiveReactionCount)), ((ValueComparer<DateTime>)(((IProperty)updatedAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(updatedAt)), ((ValueComparer<Guid>)(((IProperty)userId).GetValueComparer())).Snapshot(source.GetCurrentValue<Guid>(userId)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<Guid, DateTime, uint, uint, uint, uint, DateTime>(((ValueComparer<Guid>)(((IProperty)messageId).GetValueComparer())).Snapshot(default(Guid)), ((ValueComparer<DateTime>)(((IProperty)createdAt).GetValueComparer())).Snapshot(default(DateTime)), ((ValueComparer<uint>)(((IProperty)negativePhraseCount).GetValueComparer())).Snapshot(default(uint)), ((ValueComparer<uint>)(((IProperty)negativeReactionCount).GetValueComparer())).Snapshot(default(uint)), ((ValueComparer<uint>)(((IProperty)positivePhraseCount).GetValueComparer())).Snapshot(default(uint)), ((ValueComparer<uint>)(((IProperty)positiveReactionCount).GetValueComparer())).Snapshot(default(uint)), ((ValueComparer<DateTime>)(((IProperty)updatedAt).GetValueComparer())).Snapshot(default(DateTime))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<Guid, DateTime, uint, uint, uint, uint, DateTime>(default(Guid), default(DateTime), default(uint), default(uint), default(uint), default(uint), default(DateTime)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((MessageFaceScore)(source.Entity));
                    return ((ISnapshot)(new Snapshot<Guid>(((ValueComparer<Guid>)(((IProperty)messageId).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<Guid>(messageId)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 8,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 8,
                shadowCount: 0,
                relationshipCount: 1,
                storeGeneratedCount: 7);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "message_face_scores");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
